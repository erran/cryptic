#!/usr/bin/env ruby
# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'cryptic'
require 'cryptic/keypair'
require 'thor'

class CrypticCLI < Thor
  desc 'decrypt [ENCRYPTED_DATA] [PRIVATE_KEY] [OPTIONS]', 'Decrypt a file with a private key.'
  method_option :passphrase, aliases: %w[-p], default: nil, desc: 'The passphrase to unlock the private key with'
  method_option :encoding, aliases: %w[-e], default: :none, desc: 'The encoding to use, one of: [:none, :base64]'
  def decrypt(data, private_key)
    encrypted = Cryptic::EncryptedData.load(data, options[:encoding])
    decrypted_str = encrypted.decrypt(private_key_file, options[:passphrase])

    $stdout.puts decrypted_str
  # TODO: Update error handling
  rescue Cryptic::InvalidData => e
    $stderr.puts "[Error]: #{e.inspect}".red
  rescue Cryptic::KeyMismatch => e
    $stderr.puts "[Error]: #{e.inspect}".red
  end

  desc 'encrypt [RAW_DATA] [PUBLIC_KEY]', 'Encrypt a file with a public key.'
  method_option :encoding, aliases: %w[-e], default: :none, desc: 'The encoding to use, one of: [:none, :base64]'
  def encrypt(data, public_key)
    encrypted = Cryptic::EncryptedData.new(data, public_key)
    encrypted_str = encrypted.data

    $stdout.puts encrypted_str
  end

  desc 'generate [-o PATH]', 'Generate a private/public keypair', aliases: %w[gen key-gen]
  method_option :path, aliases: %w[-o], default: '.', desc: 'Where to place the generated files'
  def generate
    keypair = Cryptic::Keypair.new
    keypair.save!(options[:path])

    $stdout.puts "Generated keys saved as '#{File.expand_path(options[:path])}/cryptic_public.pem' and '#{File.expand_path(options[:path])}/cryptic_private.pem'."
  rescue Cryptic::KeyGenerationFailure => e
    $stderr.puts "[Error]: #{e.message}".red
  end
end

CrypticCLI.start(ARGV)
